//Sample codes for testing

x = 3;
if (x < 5) {
y = x + 1;
} else {
y = x - 1;
}

for (i = 0 ; i < next; i = i + 1) {
    if (data[i] == cookie)
        i = i + 1;
    else
        Process(data[i]);
}


if (i < next) {
    if (data[i] == cookie)
        i = i + 1;
    else
        Process(data[i]);
    i = i + 1;

    if (i < next) {
        if (data[i] == cookie)
            i = i + 1;
        else
            Process(data[i]);
        i = i + 1;
    }
}

x = 0;
while (x < 4) {
x = x + 1;
}

for (i := 0; i < n; i := i + 1) 
{
    for (j := 0; j < n - i - 1; j := j + 1) 
    {
        if (arr[j] > arr[j+1]) {
            temp := arr[j];
            arr[j] := arr[j+1];
            arr[j+1] := temp;
        }
    }
}


//bubble sort
for (i = 0; i < n - 1; i++) {
    for (j = 0; j < n - i - 1; j++) {
        if (arr[j] > arr[j + 1]) {
            temp = arr[j];
            arr[j] = arr[j + 1];
            arr[j + 1] = temp;
        }
    }
}

//insertion sort
for (int i = 1; i < n; ++i) {
    int key = arr[i];
    int j = i - 1;

    while (j >= 0 && arr[j] > key) {
        arr[j + 1] = arr[j];
        j = j - 1;
    }
    arr[j + 1] = key;
}

//selection sort 
for (int i = 0; i < n - 1; i++) {
    int min_idx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }

    int temp = arr[i];
    arr[i] = arr[min_idx];
    arr[min_idx] = temp;
}

//sessional ques
 int j, temp = 0;
    for (j = 0; j < n - 1; j++) {
        if (arr[j] > arr[j + 1]) {
            temp = arr[j];
            arr[j] = arr[j + 1];
            arr[j + 1] = temp;
        }
        else {
            arr[j] = j;
        }
    }
    return arr;
