
Code 1
1. x := 3;
2. if (x < 5) {
3. y := x + 1;
4. } else {
5. y := x - 1;
6. }
7. assert(y > 0);

SSA:
1. x1 := 3
2. φ1 := (x1 < 5)

3. y1 := x1 + 1        // from if branch
4. y2 := x1 - 1        // from else branch

5. y3 := φ1 ? y1 : y2  // phi node: y3 gets y1 if φ1 true, else y2

6. assert(y3 > 0)



Code 2
1. x := 0;
2. while (x < 4) {
3. x := x + 1;
4. }
5. assert(x == 4);
SSA:
1. x0 := 0             // initial assignment
2. φ1 := (x0 < 4)      // loop condition check

// --- First Iteration
3. x1 := x0 + 1
4. φ2 := (x1 < 4)

// --- Second Iteration
5. x2 := x1 + 1
6. φ3 := (x2 < 4)

// --- Third Iteration
7. x3 := x2 + 1
8. φ4 := (x3 < 4)

// --- Fourth Iteration
9. x4 := x3 + 1
10. φ5 := (x4 < 4)     // false → loop exits

11. assert(x4 == 4)


Code 3
1. for (i := 0; i < n; i := i + 1) {
2. for (j := 0; j < n - i - 1; j := j + 1) {
3. if (arr[j] > arr[j+1]) {
4. temp := arr[j];
5. arr[j] := arr[j+1];
6. arr[j+1] := temp;
7. }
8. }
9. }


SSA:
1.  i₀ := 0
2.  φ₁ = (i₀ < n₀)                            // outer loop guard
3.    j₀ := 0
4.    φ₂ = (j₀ < n₀ - i₀ - 1)                 // inner loop guard

5.      cond₁ := arr₀[j₀] > arr₀[j₀+1]
6.      φ₃ = cond₁

7.        temp₀ := arr₀[j₀]                   // if swap needed
8.        arr₁ := arr₀ with arr₁[j₀] = arr₀[j₀+1]
9.        arr₂ := arr₁ with arr₂[j₀+1] = temp₀
10.       arr₃ := arr₂
11.     else
12.       arr₃ := arr₀                        // no swap

13.     j₁ := j₀ + 1
14.     φ₄ = (j₁ < n₀ - i₀ - 1)               // recheck inner loop
15.     j₂ := φ₄ ? j₁ : j₀
16.     arr₄ := φ₄ ? arr₃ : arr₀             // updated or not

17.   i₁ := i₀ + 1
18.   φ₅ = (i₁ < n₀)
19.   i₂ := φ₅ ? i₁ : i₀
20.   arr₅ := φ₅ ? arr₄ : arr₀               // updated or not



Code 4:
1  if (i < next) {
2    if (data[i] == cookie)
3      i = i + 1;
4    else
5      Process(data[i]);
6
7    i = i + 1;
8
9    if (i < next) {
10     if (data[i] == cookie)
11       i = i + 1;
12     else
13       Process(data[i]);
14
15     i = i + 1;
16   }
17 }

SSA::
1   φ₁ = (i₀ < next₀)

2   φ₂ = (data[i₀] == cookie₀)
3   i₁ = i₀ + 1                  // if φ₂ true
4   i₂ = i₀                      // if φ₂ false (no change)
5   i₃ = φ₂ ? i₁ : i₂            // merged result after inner-if

6   i₄ = i₃ + 1                  // unconditional increment

7   φ₃ = (i₄ < next₀)

8   φ₄ = (data[i₄] == cookie₀)
9   i₅ = i₄ + 1                  // if φ₄ true
10  i₆ = i₄                      // if φ₄ false
11  i₇ = φ₄ ? i₅ : i₆           // merge after second inner-if

12  i₈ = i₇ + 1                  // unconditional increment in second block

13  i₉ = φ₃ ? i₈ : i₄           // merge: second if ran or not
14  i₁₀ = φ₁ ? i₉ : i₀          // merge: outer if ran or not

